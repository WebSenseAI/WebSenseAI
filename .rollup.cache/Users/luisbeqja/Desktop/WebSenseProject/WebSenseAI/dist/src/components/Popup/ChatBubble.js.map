{"version":3,"file":"ChatBubble.js","sourceRoot":"","sources":["../../../../src/components/Popup/ChatBubble.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { map } from 'lit/directives/map.js';\n\n\ninterface ChatBubbleItem {\n    id: number;\n    text: string;\n    sender: 'user' | 'bot';\n}\n\nexport class ChatBubble extends LitElement {\n    static styles = css`\n    .full {\n        width: 100%;\n        display: flex;\n    }\n    .chat-bubble--container {\n        height: 400px;\n        overflow: auto;\n        padding-top: 10px;\n    }\n    .chat-bubble--container::-webkit-scrollbar {\n        display: none;\n    }\n    .chat-bubble.rigth{\n        background-color: #4629F2;\n        color: white;\n        width: fit-content;    \n        padding: 10px 15px;\n        margin: 10px 15px;\n        border-radius: 20px 20px 0px 20px;\n        float: right;\n        max-width: 70%;\n        text-align: right;\n        font-size: 14px;\n    }\n    .chat-bubble.left{\n        background-color: #F1F7FF;\n        color: black;\n        width: fit-content;    \n        padding: 10px 15px;\n        margin: 5px 15px;\n        border-radius: 0px 20px 20px 20px;\n        float: left;\n        font-size: 14px;\n        max-width: 70%;\n        text-align: left;\n    }\n    p {\n        margin: 0;\n    }\n    `;\n    @property({ type: String }) firstmessage = \"\";\n\n\n    items: ChatBubbleItem[] = [];\n    isBotTyping = false;\n\n    scrollChat() {\n        console.log('scrolling', this.items);\n        setTimeout(() => {\n            this.renderRoot.querySelector('.chat-bubble--container')?.scrollTo({ top: this.renderRoot.querySelector('.chat-bubble--container')?.scrollHeight, behavior: 'smooth' })\n        }, 100);\n    }\n\n    splitString(input: string) {\n        const parts = input.split('/n/');\n        return parts;\n    }\n\n\n    async processMessage(m: string, delay: number) {\n        this.isBotTyping = true;\n        this.requestUpdate();\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.items.push({\n                    id: this.items.length + 1,\n                    text: m,\n                    sender: 'bot',\n                });\n                resolve(null);\n                this.isBotTyping = false;\n                this.scrollChat();\n                this.requestUpdate();\n            }, delay); // 1000 ms delay\n        });\n    }\n\n    constructor() {\n        super();\n        window.addEventListener('send-message', (e: any) => {\n            this.isBotTyping = true;\n            this.items.push({\n                id: this.items.length + 1,\n                text: e.detail.message,\n                sender: 'user',\n            });\n\n            this.scrollChat();\n            this.requestUpdate();\n        })\n        window.addEventListener('add-response', async (e: any) => {\n            const messages = this.splitString(e.detail.message);\n            for (let i = 0; i < messages.length; i++) {\n                const delay = i === 0 ? 0 : 1000;\n                await this.processMessage(messages[i], delay);\n            }\n        });\n    }\n\n    render() {\n        return html`\n        <div class=\"chat-bubble--container\">\n            <div class=\"chat-bubble left\">\n                <p>${this.firstmessage}</p>\n            </div>  \n            ${map(this.items, (i) => html`\n                <div class=\"chat-bubble ${i.sender === 'user' ? 'rigth' : 'left'}\">\n                    <p>${i.text}</p>\n                </div>  \n            `)}\n            ${this.isBotTyping ? html`\n                <div class=\"full\">\n                    <div class=\"chat-bubble left\">\n                        <chat-bubble-typing></chat-bubble-typing>\n                    </div>\n                </div>\n            ` : html``\n            }\n        </div>\n    `;\n    }\n}\n"]}